# This workflow automatically updates submodules in the parent repository.
# It can be triggered by pushes to main, manually, or via a repository_dispatch event.

name: Update Parent Repo from Submodules

on:
  # Trigger when the parent repo is pushed to main
  push:
    branches:
      - main
  # Trigger via repository_dispatch from other workflows (e.g., in submodules)
  repository_dispatch:
    types:
      - submodule-updated
  # Allow manual triggering from the Actions tab
  workflow_dispatch:

permissions:
  # Required to push the commit with submodule updates back to the repository
  contents: write

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    steps:
      - name: Debug trigger information
        run: |
          echo "=== Workflow Debug Information ==="
          echo "Triggered by: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref: ${{ github.ref }}"
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Event type: ${{ github.event.action }}"
          fi
          echo "=================================="

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Use a personal access token or the default GITHUB_TOKEN
          token: ${{ secrets.GITHUB_TOKEN }}
          # Checkout submodules recursively
          submodules: recursive
          # Fetch all history for all branches and tags
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update all submodules to latest
        run: |
          echo "Updating all submodules to their latest remote commits..."
          git submodule update --remote --merge

      - name: Check for submodule changes
        id: check_changes
        run: |
          # Stage all changes to see if any submodule pointers have been updated
          git add .

          if git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No submodule updates found."
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Submodule updates detected. Staging changes."
            # Use a delimiter for the output to handle multi-line file lists
            CHANGED_FILES=$(git diff --cached --name-only)
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            git status
          fi

      - name: Commit and push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Create a detailed commit message
          COMMIT_TITLE="chore(submodules): Update submodule references"
          COMMIT_BODY=$(cat <<EOF
          Automated submodule update.

          Updated submodules:
          ${{ steps.check_changes.outputs.changed_files }}
          EOF
          )

          git commit -m "$COMMIT_TITLE" -m "$COMMIT_BODY"
          git push origin main

      - name: Create summary
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "## Submodule Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… The workflow successfully updated submodules and pushed a new commit." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Updated Submodules:" >> $GITHUB_STEP_SUMMARY
          # Format the list of changed files with bullet points
          echo "${{ steps.check_changes.outputs.changed_files }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          # Add a direct link to the commit
          echo "### Commit Details" >> $GITHUB_STEP_SUMMARY
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "View the commit: [${COMMIT_SHA::7}](${{ github.server_url }}/${{ github.repository }}/commit/$COMMIT_SHA)" >> $GITHUB_STEP_SUMMARY

